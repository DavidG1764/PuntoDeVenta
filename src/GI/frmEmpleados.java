/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
//made by MSD
package GI;

import Modelo.empleado;
import Control.Proceso;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author salom
 */
public class frmEmpleados extends javax.swing.JFrame {

    /**
     * Creates new form frm_empleados
     */
    Proceso objp =new Proceso();
    String[] cabecera={"Nombre","Fecha","Curp","id","Numero"};
    DefaultTableModel model=new DefaultTableModel(null,cabecera);
    public frmEmpleados() {
        initComponents();
        tdtDatos.setModel(model);
        lista();
        id();
        tdtDatos.setEnabled(false);
        btnActualizar.setVisible(false);
        int i;
        for(i=2024;i>=1980;i--){
            cbxAño.addItem(String.valueOf(i));
        }
        this.setTitle("Empleados");
        this.setIconImage(new ImageIcon(getClass().getResource("/img/empleado.jpg")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRegistrar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNumero = new javax.swing.JTextField();
        txtCurp = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cbxDia = new javax.swing.JComboBox<>();
        cbxMes = new javax.swing.JComboBox<>();
        cbxAño = new javax.swing.JComboBox<>();
        btnRegresar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtIdMostrado = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tdtDatos = new javax.swing.JTable();
        btnActualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Empleados");

        btnRegistrar.setBackground(new java.awt.Color(119, 221, 119));
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        btnModificar.setBackground(new java.awt.Color(253, 253, 150));
        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(255, 105, 97));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        jLabel1.setText("Nombre");

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        jLabel2.setText("Numero de telefono");

        jLabel3.setText("CURP");

        jLabel4.setText("Fecha de nacimiento");

        cbxDia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30" }));

        cbxMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" }));

        cbxAño.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAñoActionPerformed(evt);
            }
        });

        btnRegresar.setBackground(new java.awt.Color(132, 182, 244));
        btnRegresar.setText("Regresar");
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        jLabel5.setText("ID");

        tdtDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tdtDatos);

        btnActualizar.setBackground(new java.awt.Color(253, 202, 225));
        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(87, 87, 87)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(70, 70, 70)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbxAño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtCurp, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                                        .addComponent(btnRegresar))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbxMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(15, 15, 15)
                                                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(70, 70, 70)
                                        .addComponent(btnActualizar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnEliminar))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(btnRegistrar)
                                    .addComponent(cbxDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtIdMostrado, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCurp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbxAño, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegresar))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtIdMostrado, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegistrar)
                    .addComponent(btnModificar)
                    .addComponent(btnEliminar)
                    .addComponent(btnActualizar))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
        Main regresar = new Main();
        regresar.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void cbxAñoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAñoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxAñoActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        // TODO add your handling code here:
        String nombre,curp,fecha;
        String numero;
        String id;
        nombre=txtNombre.getText();
        curp=txtCurp.getText();
        fecha=(cbxDia.getSelectedItem().toString()+"/"+cbxMes.getSelectedItem().toString()+"/"+cbxAño.getSelectedItem().toString());
        numero=txtNumero.getText();
        id=txtIdMostrado.getText();
        if(!"".equals(nombre) &&!"".equals(fecha)&&!"".equals(curp)&&!"".equals(id)&& !"".equals(numero) && (cbxDia.getSelectedIndex())!=0 ){
        empleado obje=new empleado(nombre,fecha,curp,id,numero);
        try{
        objp.insertar(obje);
            
        }catch(IOException e){
            JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
        lista();
        id();
        }else{
            JOptionPane.showMessageDialog(rootPane, "Es necesario llenar todas las celdas");
        }
        
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        // TODO add your handling code here:
        String idMod=JOptionPane.showInputDialog("Dame el id que deseas modificar");
        buscar(idMod);
        
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        String idEl=JOptionPane.showInputDialog("Dame el id a eliminar");
        boolean id=false;
        int id_check;
        if("".equals(idEl)){
            JOptionPane.showMessageDialog(rootPane, "Esta vacio el recuadro");
        }else{
            try{
            id_check=Integer.parseInt(idEl);
            id=true;
        
            }
            catch(NumberFormatException e){
            JOptionPane.showMessageDialog(rootPane, "Lo ingresado no es un numero: "+e.getMessage());
            }
            if(id){
            eliminar(idEl);
            lista();
            }else{
                JOptionPane.showMessageDialog(rootPane,"No se pudo completar la accion");
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        String nombre,curp,fecha,numero,id;
        nombre=txtNombre.getText();
        curp=txtCurp.getText();
        fecha=(cbxDia.getSelectedItem().toString()+"/"+cbxMes.getSelectedItem().toString()+"/"+cbxAño.getSelectedItem().toString());
        numero=txtNumero.getText();
        id=txtIdMostrado.getText();
        actualizar(id,nombre,fecha,curp,numero);
        lista();
        limpiar();
    }//GEN-LAST:event_btnActualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmEmpleados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmEmpleados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmEmpleados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmEmpleados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmEmpleados().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnRegresar;
    private javax.swing.JComboBox<String> cbxAño;
    private javax.swing.JComboBox<String> cbxDia;
    private javax.swing.JComboBox<String> cbxMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tdtDatos;
    private javax.swing.JTextField txtCurp;
    private javax.swing.JLabel txtIdMostrado;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNumero;
    // End of variables declaration//GEN-END:variables
    
    private void limpiar(){
    txtNombre.setText(null);
    cbxAño.setSelectedIndex(0);
    cbxDia.setSelectedIndex(0);
    cbxMes.setSelectedIndex(0);
    txtCurp.setText(null);
    txtNumero.setText(null);
    }
    private void id() {
    try {
        String iduso = "0"; // Inicializa iduso con un valor predeterminado
        objp.leer();
        for (empleado e : objp.array) {
            iduso = e.getId(); // Actualiza iduso con cada valor de id en el array
        }
        int idparse = Integer.parseInt(iduso);
        int idnuevo = idparse + 1;
        txtIdMostrado.setText(String.valueOf(idnuevo));
    } catch (IOException | NumberFormatException e) {
        JOptionPane.showMessageDialog(rootPane, e.getMessage());
    }
}
    private void lista(){
    try{
        model.setRowCount(0);
        objp.leer();
        for(empleado e:objp.array){
            Object[] fila={e.getNombre(),e.getFecha(),e.getCurp(),e.getId(),e.getNumero()};
            
            model.addRow(fila);
                    }
                    
        
    }catch(IOException e){
        JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }
    private void eliminar(String id) {
    String ideliminar = id;
    try {
        objp.leer(); // Leer todos los registros
        // Crear una nueva lista para almacenar los registros actualizados
        ArrayList<empleado> empleadosActualizados = new ArrayList<>();
        
        // Recorrer todos los empleados y agregar a la lista actualizada si no coincide con el id a eliminar
        for (empleado e : objp.array) {
            if (!e.getId().equals(ideliminar)) {
                empleadosActualizados.add(e);
            }
        }
        
        // Reescribir el archivo con los empleados actualizados
        escribirArchivoActualizado(empleadosActualizados);
        
    } catch (IOException e) {
        JOptionPane.showMessageDialog(rootPane, e.getMessage());
    }
}
    public void escribirArchivoActualizado(ArrayList<empleado> empleados) throws IOException {
    FileWriter fw = new FileWriter("DOCUMENTOS\\BD_EMPLEADO.txt", false); // Abrir el archivo en modo de escritura (sobrescribir)
    for (empleado e : empleados) {
        String cad = e.getNombre() + "-" + e.getFecha() + "-" + e.getCurp() + "-" + e.getId() + "-" + e.getNumero();
        fw.write(cad);
        fw.write(10); // Agregar un salto de línea
    }
    fw.close();
}
    private void buscar(String id){
        String buscarid=id;
        boolean encontrado=false;
        try{
            objp.leer();
            for(empleado e: objp.array){
                if (buscarid.equals(e.getId())){
                    txtNombre.setText(e.getNombre());
                    txtCurp.setText(e.getCurp());
                    txtNumero.setText(e.getNumero());
                    txtIdMostrado.setText(e.getId());
                    cbxDia.setSelectedItem(e.getFecha().substring(0,1));
                    cbxMes.setSelectedItem(e.getFecha().substring(4,5));
                    cbxAño.setSelectedItem(e.getFecha().substring(6,9));
                    encontrado=true;
                    btnActualizar.setVisible(true);
                    break;
                }
                
            }
            if(!encontrado){
                JOptionPane.showMessageDialog(rootPane, "No se encontro el id");
            }
            
        }catch(IOException e){
        JOptionPane.showMessageDialog(rootPane, e.getMessage());
        }
    }
    private void actualizar(String id, String nuevoNombre, String nuevaFecha, String nuevoCurp, String nuevoNumero) {
    try {
        objp.leer(); // Leer todos los registros
        // Crear una nueva lista para almacenar los registros actualizados
        ArrayList<empleado> empleadosActualizados = new ArrayList<>();
        
        // Recorrer todos los empleados y actualizar el que coincide con el id
        for (empleado e : objp.array) {
            if (e.getId().equals(id)) {
                e.setNombre(nuevoNombre);
                e.setFecha(nuevaFecha);
                e.setCurp(nuevoCurp);
                e.setNumero(nuevoNumero);
            }
            empleadosActualizados.add(e);
        }
        
        // Reescribir el archivo con los empleados actualizados
        escribirArchivoActualizado(empleadosActualizados);
        JOptionPane.showMessageDialog(rootPane, "Datos Actualizados correctamente");
        
    } catch (IOException e) {
        JOptionPane.showMessageDialog(rootPane, "Error al actualizar los datos: "+e.getMessage());
    }
    btnActualizar.setVisible(false);
}
    
}
